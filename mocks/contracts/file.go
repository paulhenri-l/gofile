// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/paulhenri-l/gofile/contracts (interfaces: RotatedFileHandler)

// Package contracts is a generated GoMock package.
package contracts

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRotatedFileHandler is a mock of RotatedFileHandler interface
type MockRotatedFileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRotatedFileHandlerMockRecorder
}

// MockRotatedFileHandlerMockRecorder is the mock recorder for MockRotatedFileHandler
type MockRotatedFileHandlerMockRecorder struct {
	mock *MockRotatedFileHandler
}

// NewMockRotatedFileHandler creates a new mock instance
func NewMockRotatedFileHandler(ctrl *gomock.Controller) *MockRotatedFileHandler {
	mock := &MockRotatedFileHandler{ctrl: ctrl}
	mock.recorder = &MockRotatedFileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRotatedFileHandler) EXPECT() *MockRotatedFileHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockRotatedFileHandler) Handle(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockRotatedFileHandlerMockRecorder) Handle(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockRotatedFileHandler)(nil).Handle), arg0)
}
